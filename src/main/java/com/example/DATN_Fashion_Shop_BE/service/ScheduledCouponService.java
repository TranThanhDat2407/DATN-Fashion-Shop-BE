package com.example.DATN_Fashion_Shop_BE.service;

import com.example.DATN_Fashion_Shop_BE.config.CouponConfig;
import com.example.DATN_Fashion_Shop_BE.dto.CouponTranslationDTO;
import com.example.DATN_Fashion_Shop_BE.model.Coupon;
import com.example.DATN_Fashion_Shop_BE.model.User;
import com.example.DATN_Fashion_Shop_BE.repository.CouponRepository;
import com.example.DATN_Fashion_Shop_BE.repository.UserRepository;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduledCouponService {
    private final CouponConfigService couponConfigService; ;
    private final CouponRepository couponRepository;
    private final UserRepository userRepository;
    private final CouponService couponService;
    private final EmailService emailService;
    private final FileStorageService fileStorageService;


    @Scheduled(cron = "0 0 0 * * ?")
//   @Scheduled(cron = "0 * * * * ?")
    public void generateDailyCoupons() {
        LocalDate today = LocalDate.now();
        log.info("üîÑ Ki·ªÉm tra v√† t·∫°o m√£ gi·∫£m gi√° cho ng√†y {}", today);

        // üéä Ki·ªÉm tra v√† t·∫°o m√£ gi·∫£m gi√° cho ng√†y l·ªÖ
        generateHolidayCoupons(today);

        // üéÇ Ki·ªÉm tra v√† t·∫°o m√£ gi·∫£m gi√° sinh nh·∫≠t cho kh√°ch h√†ng
        generateBirthdayCoupons(today);
    }


    private void generateHolidayCoupons(LocalDate today) {
        List<LocalDate> holidaysForAllUsers = List.of(
                LocalDate.of(today.getYear(), 03, 11),  // T·∫øt D∆∞∆°ng L·ªãch
                LocalDate.of(today.getYear(), 4, 30), // Gi·∫£i ph√≥ng mi·ªÅn Nam
                LocalDate.of(today.getYear(), 9, 2)   // Qu·ªëc kh√°nh
        );
        List<LocalDate> holidaysForWomenOnly = List.of(
                LocalDate.of(today.getYear(), 3, 8),  // Ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ
                LocalDate.of(today.getYear(), 10, 20) // Ng√†y Nh√† gi√°o Vi·ªát Nam
        );
        if (holidaysForAllUsers.contains(today)) {
            // üéâ M√£ gi·∫£m gi√° cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
            String couponCode = "HOLIDAY_" + today;
            CouponConfig config = couponConfigService.getCouponConfig("holiday");
            if (config == null) {
                log.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh m√£ gi·∫£m gi√° ng√†y l·ªÖ!");
                return;
            }
            if (config == null) {
                log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh m√£ gi·∫£m gi√° holiday! B·ªè qua vi·ªác t·∫°o m√£.");
                return; // ‚ùå Kh√¥ng t·∫°o m√£ n·∫øu kh√¥ng c√≥ config
            }

            if (!couponRepository.existsByCode(couponCode)) {
                Coupon coupon = couponService.createCouponForAllUser(
                        couponCode,
                        config.getDiscountType(),
                        config.getDiscountValue(),
                        config.getMinOrderValue(),
                        config.getExpirationDays(),
                        true,
                        config.getImageUrl(),
                        COUPON_TRANSLATIONS.get("HOLIDAY")

                );
                log.info("üéä ƒê√£ t·∫°o m√£ gi·∫£m gi√° ng√†y l·ªÖ: {}!", coupon.getCode());

                // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
                List<User> allUsers = userRepository.findAll();
                for (User user : allUsers) {
                    emailService.sendCouponEmail(user.getEmail(), coupon.getCode(),
                            "/uploads/coupons/holidayCoupon.png", 3, "HOLIDAY");
                }
            }
        }
        if (holidaysForWomenOnly.contains(today)) {
            CouponConfig config = couponConfigService.getCouponConfig("women_day");
            if (config == null) {
                log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh m√£ gi·∫£m gi√° women_day! B·ªè qua vi·ªác t·∫°o m√£.");
                return; // ‚ùå Kh√¥ng t·∫°o m√£ n·∫øu kh√¥ng c√≥ config
            }

            // üéÄ M√£ gi·∫£m gi√° ch·ªâ cho ng∆∞·ªùi d√πng n·ªØ
            String couponCode = "WOMEN_DAY_" + today;

            if (!couponRepository.existsByCode(couponCode)) {
                List<User> femaleUsers = userRepository.findByGender("FEMALE"); // L·∫•y danh s√°ch n·ªØ
                for (User user : femaleUsers) {
                    Coupon coupon = couponService.createCouponForUser(
                            couponCode,
                            config.getDiscountType(),
                            config.getDiscountValue(),
                            config.getMinOrderValue(),
                            config.getExpirationDays() ,
                            user,
                            config.getImageUrl(),COUPON_TRANSLATIONS.get("HOLIDAY")
                            );
                    log.info("üíñ ƒê√£ t·∫°o m√£ gi·∫£m gi√° {} cho user: {}", coupon.getCode(), user.getEmail());
                    emailService.sendCouponEmail(user.getEmail(), coupon.getCode(),
                            "/uploads/coupons/wonmendayCoupon.png", 5, "WOMEN_DAY");
                }
            }
        }
    }
    public void generateBirthdayCoupons(LocalDate today) {
        List<User> usersWithBirthday = userRepository.findByDateOfBirth(today);
        CouponConfig config = couponConfigService.getCouponConfig("birthday");

        if (config == null) {
            log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh m√£ gi·∫£m gi√° sinh nh·∫≠t! B·ªè qua vi·ªác t·∫°o m√£.");
            return; // ‚ùå Kh√¥ng t·∫°o m√£ n·∫øu kh√¥ng c√≥ config
        }

        String imageUrl = config.getImageUrl() != null ? config.getImageUrl() : "/uploads/coupons/BdayCoupon.png";

        for (User user : usersWithBirthday) {
            String couponCode = "BDAY_" + user.getId();
            if (!couponRepository.existsByCode(couponCode)) {
                Coupon coupon = couponService.createCouponForUser(
                        couponCode, config.getDiscountType(), config.getDiscountValue(),
                        config.getMinOrderValue(), config.getExpirationDays(),
                        user, imageUrl, COUPON_TRANSLATIONS.get("BIRTHDAY")
                );

                log.info("üéÇ ƒê√£ t·∫°o m√£ gi·∫£m gi√° sinh nh·∫≠t {} cho user {}!", coupon.getCode(), user.getEmail());
                emailService.sendCouponEmail(user.getEmail(), coupon.getCode(), imageUrl, config.getExpirationDays(), "BIRTHDAY");
            }
        }
    }


    static final Map<String, List<CouponTranslationDTO>> COUPON_TRANSLATIONS = Map.of(
            "BIRTHDAY", List.of(
                    new CouponTranslationDTO("M√£ gi·∫£m gi√° sinh nh·∫≠t", "Gi·∫£m gi√° nh√¢n d·ªãp sinh nh·∫≠t", "vi"),
                    new CouponTranslationDTO("Birthday Discount", "Discount for your birthday", "en"),
                    new CouponTranslationDTO("Ë™ïÁîüÊó•Ââ≤Âºï", "Ë™ïÁîüÊó•„ÅÆÂâ≤Âºï", "jp")
            ),
            "HOLIDAY", List.of(
                    new CouponTranslationDTO("M√£ gi·∫£m gi√° ng√†y l·ªÖ", "∆Øu ƒë√£i ƒë·∫∑c bi·ªát cho ng√†y l·ªÖ", "vi"),
                    new CouponTranslationDTO("Holiday Discount", "Special offer for the holiday", "en"),
                    new CouponTranslationDTO("Á•ùÊó•Ââ≤Âºï", "Á•ùÊó•„ÅÆÁâπÂà•„Ç™„Éï„Ç°„Éº", "jp")
            ),
            "WELCOME", List.of(
                    new CouponTranslationDTO("M√£ gi·∫£m gi√° ch√†o m·ª´ng", "∆Øu ƒë√£i cho kh√°ch h√†ng m·ªõi", "vi"),
                    new CouponTranslationDTO("Welcome Discount", "Special offer for new users", "en"),
                    new CouponTranslationDTO("„Ç¶„Çß„É´„Ç´„É†Ââ≤Âºï", "Êñ∞Ë¶è„É¶„Éº„Ç∂„ÉºÂêë„Åë„ÅÆÁâπÂà•„Ç™„Éï„Ç°„Éº", "jp")
            )
    );

}


